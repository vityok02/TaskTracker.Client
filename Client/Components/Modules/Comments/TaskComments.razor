<h5 class="mb-3">Comments</h5>

<Form Model=@CommentModel
      OnFinish=@CreateCommentAsync>
    <FluentValidationValidator />
    <MarkdownEditor @bind-Value="@CommentModel.Comment"
                    MaxHeight="100px"
                    Placeholder="Use Markdown to format your comment" />

    <div class="d-flex justify-content-end">
        <Button HtmlType="submit"
                Class="btn btn-primary btn-sm">
            Comment
        </Button>
    </div>
</Form>

<AntList DataSource=@Comments
         Context="comment"
         Class="list-group mt-3">
    <ListItem Class="comment list-group-item border rounded px-3 py-2 shadow-sm bg-white mb-3">

        <div class="d-flex justify-content-between align-items-center gap-2 pb-2">
            <UserProfileLink User=@comment.CreatedBy />

            <div class="d-flex align-items-center">
                @if (comment.UpdatedAt is not null)
                {
                    <span class="badge bg-secondary me-2">Updated</span>
                }

                <small class="text-muted">
                    @GetCommentDate(comment)
                </small>
            </div>
        </div>

        <Divider Class="my-2" />

        @if (UpdateCommentId == comment.Id)
        {
            <Form Model=@UpdateCommentModel
                  OnFinish=@UpdateCommentAsync>
                <FluentValidationValidator />

                <MarkdownEditor @bind-Value="@UpdateCommentModel.Comment"
                                MaxHeight="150px" />

                <div class="d-flex gap-2">
                    <Button HtmlType="button"
                            OnClick=@(() => DeleteUpdateCommentId())
                            Class="btn btn-secondary btn-sm">
                        Cancel
                    </Button>

                    <Button HtmlType="submit"
                            Class="btn btn-primary btn-sm">
                        Save
                    </Button>
                </div>
            </Form>
        }
        else
        {
            @((MarkupString)Markdown.ToHtml(comment.Comment))

            <div class="d-flex gap-2 myClass">
                <Button Type=@ButtonType.Text
                        OnClick=@(() => SetUpdateCommentId(comment.Id))
                        Class="btn btn-sm btn-link text-decoration-none text-primary">
                    @if (IsUsersComment(comment))
                    {
                        <i class="bi bi-pencil"></i>
                        @("Edit")
                    }
                </Button>

                <Popconfirm Title="Are you sure delete this comment?"
                            OnConfirm=@(() => DeleteCommentAsync(comment.Id))
                            OkText="Yes"
                            CancelText="No">
                    <Button Type=@ButtonType.Text
                            Class="btn btn-sm btn-link text-danger text-decoration-none">
                        @if (IsUsersComment(comment))
                        {
                            <i class="bi bi-trash"></i>
                            @("Delete")
                        }
                    </Button>
                </Popconfirm>
            </div>
        }
    </ListItem>
</AntList>

