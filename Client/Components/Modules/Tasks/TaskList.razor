@page "/projects/{projectId:guid}/tasks"

<PageTitle>@Title</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center">
        <NavLink href=@(PageRoutes.ProjectsPage)
                 class="text-dark me-3">
            <i class="bi bi-arrow-left fs-4" />
        </NavLink>

        <NavLink href=@($"/projects/{ProjectId}/settings")
                 class="text-decoration-none text-dark d-flex justify-content-between align-items-center">
            <h4 class="mb-0">
                @Title
            </h4>

            <i class="bi bi-gear-fill ms-2" />
        </NavLink>
    </div>

    <div>
        <a href=@($"/projects/{ProjectId}/lobby")
           class="btn">
            <i class="bi bi-telephone"></i>
        </a>
        <CascadingValue Value=@Project?.Role?.Name>
            <RoleAuthorizeView AllowedRoles=@([Roles.Admin, Roles.Contributor])>
                <Allowed>
                    <Button OnClick=@OpenCreateStateForm
                            Class="btn btn-primary">
                        Add state
                    </Button>
                </Allowed>
            </RoleAuthorizeView>
        </CascadingValue>
        <NavLink href=@($"/projects/{ProjectId}/calendar")
            class="text-black">
            <i class="bi bi-calendar2-check"></i>
        </NavLink>
    </div>
</div>

@if (Project is null)
{
    <Spin Size=@SpinSize.Large />
    return;
}

@if (!Project!.States.Any())
{
    <Empty Description=@("You have not added any states yet") />
    return;
}

<div class="mb-3 mt-3">
    <Search OnSearch=@SearchTasksByNameAsync
            Placeholder="Search by task name"
            AllowClear
            OnClear=@ClearSearchAsync
            Class="w-100" />
</div>

<CascadingValue Value=@Project?.Role?.Name>
    <div class="overflow-auto" style="width: 100%;">
        <div class="row g-4 flex-nowrap cards" style="min-width: 100%; height: calc(100vh - 250px);">
            @foreach (var state in Project!.States)
            {
                <TasksColumn Tasks=@Tasks.Where(t => t.StateId == state.Id).OrderBy(t => t.SortOrder).ToList()
                             TaskModel=@TaskModel
                             State=@state
                             ProjectId=@ProjectId
                             Role=@Project.Role.Name
                             OnShowInput=@ShowInput
                             OnOpenDetails=@OpenDetails
                             OnStateDeleted=@DeleteStateFromList
                             OnOpenUpdateStateForm=@(() => OpenUpdateStateForm(state.Id)) />
            }
        </div>
    </div>

    @if (!HideInput)
    {
        <div class="mt-2">
            <Form Model=@TaskModel
                  OnFinish=@Submit
                  Layout=@FormLayout.Horizontal>
                <FluentValidationValidator />
                <div class="d-flex align-items-stretch"
                     style="height: 38px">
                    <Button HtmlType="submit"
                            Class="btn btn-outline-secondary me-1 h-100">
                        +
                    </Button>
                    <FormItem class="flex-grow-1">
                        <Input Size=@InputSize.Large
                               @ref=@Input
                               @bind-Value=@TaskModel.Name
                               Placeholder="Task name" />
                    </FormItem>
                </div>
            </Form>
        </div>
    }

    <StateForm @bind-Visible=@_stateFormVisible
               ProjectId=@ProjectId
               @bind-StateId=@_selectedStateId
               StateModel=@Project?.States?.FirstOrDefault(s => s.Id == _selectedStateId)?.ToStateModel()
               OnSubmit=@LoadDataAsync />

    <TaskDetails TaskId=@_selectedTaskId
                 ProjectId=@ProjectId
                 @bind-Visible=@_detailsVisible />
</CascadingValue>
